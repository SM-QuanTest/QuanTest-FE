package com.example.quantest.ui.stockdetail

import android.util.Log
import android.view.LayoutInflater
import android.widget.FrameLayout
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.material3.IconButton
import androidx.compose.material3.TabRow
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.Modifier
import androidx.compose.foundation.layout.*
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.viewinterop.AndroidView
import com.github.mikephil.charting.charts.CombinedChart
import com.github.mikephil.charting.data.CandleData
import com.github.mikephil.charting.data.CandleDataSet
import android.graphics.Color as AndroidColor
import android.graphics.Paint
import androidx.compose.ui.graphics.Color.Companion.Gray
import com.github.mikephil.charting.components.XAxis
import com.github.mikephil.charting.data.CombinedData
import com.github.mikephil.charting.data.LineData
import com.github.mikephil.charting.data.LineDataSet
import com.github.mikephil.charting.formatter.ValueFormatter
import com.github.mikephil.charting.data.Entry
import androidx.compose.ui.graphics.toArgb
import com.example.quantest.ui.theme.Green
import com.example.quantest.ui.theme.Red
import com.example.quantest.ui.theme.Blue
import com.example.quantest.ui.theme.Orange
import com.example.quantest.ui.theme.Magenta
import com.example.quantest.ui.theme.StormGray40
import com.github.mikephil.charting.components.YAxis
import com.github.mikephil.charting.data.BarData
import com.github.mikephil.charting.data.BarDataSet
import androidx.compose.ui.Alignment
import com.example.quantest.ui.theme.Navy
import com.example.quantest.ui.theme.StormGray10
import com.example.quantest.ui.theme.StormGray80
import androidx.compose.ui.text.TextStyle
import com.example.quantest.data.model.ChartData
import com.example.quantest.R
import com.example.quantest.util.formatPrice
import com.example.quantest.util.formatVolume
import com.example.quantest.util.ChartDateFormatter
import com.example.quantest.util.calculateMA
import com.example.quantest.util.chartDataToEntries
import com.example.quantest.util.chartDataToVolumeEntries
import com.example.quantest.util.formatAmountToEokWon
import com.example.quantest.util.formatChartDate
import kotlin.math.abs

@Preview(showBackground = true)
@Composable
fun StockDetailScreenPreview() {
    MaterialTheme {
        StockDetailScreen(
            stockId = 1234,
            onBackClick = {},
            onDetailClick = {},
            onBuyClick = {}
        )
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun StockDetailScreen(
    stockId: Int,
    onBackClick: () -> Unit,
    onDetailClick: () -> Unit,
    onBuyClick: () -> Unit
) {
    val viewModel = remember { StockDetailViewModel() }
    LaunchedEffect(stockId) {
        Log.d("StockDetailScreen", "Received stockId: $stockId")
        viewModel.fetchChartData(stockId)
    }


    var selectedTab by remember { mutableStateOf(0) }
    val tabs = listOf("Ï∞®Ìä∏", "Ï¢ÖÎ™©Ï†ïÎ≥¥")

    Column(modifier = Modifier.fillMaxSize()) {
        // ÏÉÅÎã® Î∞î
        TopAppBar(
            navigationIcon = {
                IconButton(onClick = { onBackClick() }) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_arrow_back),
                        contentDescription = "Îí§Î°úÍ∞ÄÍ∏∞"
                    )
                }
            },
            title = { /* ÏÉùÎûµ */ }
        )

        // Ï¢ÖÎ™© Í∏∞Î≥∏ Ï†ïÎ≥¥
        val latest = viewModel.latestChartData

        Column(modifier = Modifier.padding(horizontal = 16.dp)) {
            Text(
                text = latest?.stockName ?: "-",
                fontWeight = FontWeight.Bold,
                fontSize = 18.sp
            )
            Text(
                text = latest?.chartClose?.let { formatPrice(it) } ?: "-Ïõê",
                fontWeight = FontWeight.ExtraBold,
                fontSize = 30.sp
            )

            val priceChange = latest?.priceChange ?: 0
            val changePercent = latest?.chartChangePercent ?: 0.0
            val isRise = priceChange >= 0
            val changeText = if (latest != null) {
                val sign = if (isRise) "+" else "-"
                "$sign${formatPrice(abs(priceChange))} (${String.format("%.2f", abs(changePercent))}%)"
            } else {
                ""
            }

            Text(
                text = changeText,
                fontSize = 16.sp,
                color = if (isRise) Red else Blue
            )
        }

        Spacer(modifier = Modifier.height(8.dp))

        // ÌÉ≠
        TabRow(selectedTabIndex = selectedTab) {
            tabs.forEachIndexed { index, label ->
                Tab(
                    selected = selectedTab == index,
                    onClick = { selectedTab = index },
                    text = {
                        Text(
                            text = label
                            )
                    }
                )
            }
        }

        when (selectedTab) {
            0 -> ChartTabContent(viewModel.chartData)
            1 -> InfoTabContent(viewModel)
        }

        Spacer(modifier = Modifier.height(16.dp))

        HorizontalDivider(
            color = StormGray10,
            thickness = 1.dp,
            modifier = Modifier.fillMaxWidth()
        )

        // ÏùºÎ≥Ñ ÏãúÏÑ∏ Î≥¥Í∏∞
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .clickable { onDetailClick() }
                .padding(16.dp),
            horizontalArrangement = Arrangement.Center,           // üî¥ Ï§ëÏïô Ï†ïÎ†¨
            verticalAlignment = Alignment.CenterVertically
        ) {
            Row(verticalAlignment = Alignment.CenterVertically) {
                Text(
                    text = "ÏùºÎ≥Ñ ÏãúÏÑ∏ Î≥¥Í∏∞",
                    fontWeight = FontWeight.Medium,
                    color = StormGray40
                )
                Spacer(modifier = Modifier.width(4.dp))
                Icon(
                    painter = painterResource(id = R.drawable.ic_arrow_next),
                    contentDescription = "ÎçîÎ≥¥Í∏∞",
                    tint = StormGray40,
                    modifier = Modifier.size(16.dp)
                )
            }
        }

        HorizontalDivider(
            color = StormGray10,
            thickness = 12.dp,
            modifier = Modifier.fillMaxWidth()
        )

        Spacer(modifier = Modifier.weight(1f))

        // Íµ¨Îß§ÌïòÍ∏∞ Î≤ÑÌäº
        Button(
            onClick = onBuyClick,
            modifier = Modifier
                .fillMaxWidth()
                .padding(20.dp),
            shape = RoundedCornerShape(12.dp),
            colors = ButtonDefaults.buttonColors(
                containerColor = Navy,
                contentColor = Color.White
            )
        ) {
            Text(
                text = "Íµ¨Îß§ÌïòÍ∏∞",
                fontSize = 18.sp
            )
        }
    }
}

// Ï∞®Ìä∏ ÌÉ≠
@Composable
fun ChartTabContent(data: List<ChartData>) {

    if (data.isEmpty()) return

    val candleEntries = chartDataToEntries(data)

    AndroidView(
        factory = { context ->
            val view = LayoutInflater.from(context).inflate(R.layout.candle_chart, null) as FrameLayout
            val chart = view.findViewById<CombinedChart>(R.id.candleChart)

            // --- Ï∫îÎì§ Îç∞Ïù¥ÌÑ∞ ---
            val candleDataSet = CandleDataSet(chartDataToEntries(data), "ÏùºÎ¥â").apply {
                color = AndroidColor.GRAY
                shadowColor = AndroidColor.DKGRAY
                shadowWidth = 0.7f
                decreasingColor = Blue.toArgb()
                decreasingPaintStyle = Paint.Style.FILL
                increasingColor = Red.toArgb()
                increasingPaintStyle = Paint.Style.FILL
                neutralColor = AndroidColor.BLUE
                setDrawValues(false)
                axisDependency = YAxis.AxisDependency.RIGHT // Ï∫îÎì§ÏùÄ Ïö∞Ï∏° YÏ∂ï
            }
            val candleData = CandleData(candleDataSet)

            // --- Ïù¥ÎèôÌèâÍ∑†ÏÑ† ---
            fun createMASet(maData: List<Entry>, label: String, colorInt: Int) = LineDataSet(maData, label).apply {
                color = colorInt
                lineWidth = 1.5f
                setDrawCircles(false)
                setDrawValues(false)
                axisDependency = YAxis.AxisDependency.RIGHT // MAÎèÑ Ïö∞Ï∏° YÏ∂ï
            }

            val lineData = LineData(
                createMASet(calculateMA(data, 5), "5", Green.toArgb()),
                createMASet(calculateMA(data, 20), "20", Magenta.toArgb()),
                createMASet(calculateMA(data, 60), "160", Orange.toArgb())
            )

            // --- Í±∞ÎûòÎüâ ---
            val volumeDataSet = BarDataSet(chartDataToVolumeEntries(data), "Í±∞ÎûòÎüâ").apply {
                color = Gray.toArgb()
                setDrawValues(false)
                axisDependency = YAxis.AxisDependency.LEFT // Í±∞ÎûòÎüâÏùÄ Ï¢åÏ∏° YÏ∂ï
            }
            val barData = BarData(volumeDataSet)

            // --- CombinedData ---
            val combinedData = CombinedData().apply {
                setData(candleData)
                setData(lineData)
                setData(barData)
            }

            chart.data = combinedData

            // --- Ï∞®Ìä∏ ÏÜçÏÑ± ---
            chart.apply {
                // XÏ∂ï
                xAxis.apply {
                    position = XAxis.XAxisPosition.BOTTOM
                    granularity = 1f
                    setDrawGridLines(false)
                    valueFormatter = ChartDateFormatter(data)
                }

                // Ï¢åÏ∏° YÏ∂ï = Í±∞ÎûòÎüâ
                chart.axisLeft.apply {
                    isEnabled = true
                    valueFormatter = object : ValueFormatter() {
                        override fun getFormattedValue(value: Float): String {
                            return when {
                                value >= 1_000_000 -> String.format("%.1fM", value / 1_000_000)
                                value >= 1_000 -> String.format("%.1fK", value / 1_000)
                                else -> value.toInt().toString()
                            }
                        }
                    }
                }
                axisRight.isEnabled = true

                description.isEnabled = false
                legend.isEnabled = true
                legend.isWordWrapEnabled = true

                // ÌôïÎåÄ/Ï∂ïÏÜå, ÎìúÎûòÍ∑∏
                setPinchZoom(true)
                isDragEnabled = true
                setScaleEnabled(true)
                setDrawGridBackground(false)
                isDoubleTapToZoomEnabled = true
                isDragDecelerationEnabled = true
                dragDecelerationFrictionCoef = 0.9f

                // Ï¥àÍ∏∞ ÌôîÎ©¥
                setVisibleXRangeMaximum(45f)
                moveViewToX(data.size - 45f)
            }

            chart.invalidate()
            view
        },
        modifier = Modifier
            .fillMaxWidth()
            .height(360.dp)
    )
}

// Ï¢ÖÎ™© Ï†ïÎ≥¥ ÌÉ≠
@Composable
fun InfoTabContent(viewModel: StockDetailViewModel) {
    val data = viewModel.latestChartData

    Column(modifier = Modifier.padding(16.dp)) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 8.dp),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = "ÏãúÏÑ∏",
                fontWeight = FontWeight.Bold,
                fontSize = 18.sp
            )
            Text(
                text = "${formatChartDate(data?.chartDate)} Í∏∞Ï§Ä",
                fontSize = 14.sp,
                color = StormGray40
            )
        }

        Spacer(modifier = Modifier.height(8.dp))

        // 1ÎÖÑ ÏµúÏ†ÄÍ∞Ä ~ ÏµúÍ≥†Í∞Ä Ïä¨ÎùºÏù¥Îçî
        // TODO: Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Ïó∞Îèô
//        Row(
//            modifier = Modifier.fillMaxWidth(),
//            horizontalArrangement = Arrangement.SpaceBetween
//        ) {
//            Text("1ÎÖÑ ÏµúÏ†ÄÍ∞Ä\n49,900Ïõê", fontSize = 12.sp)
//            Text("1ÎÖÑ ÏµúÍ≥†Í∞Ä\n88,800Ïõê", fontSize = 12.sp)
//        }

        Spacer(modifier = Modifier.height(12.dp))

        // ÏãúÍ∞Ä, Ï¢ÖÍ∞Ä, Í±∞ÎûòÎüâ, Í±∞ÎûòÎåÄÍ∏à
        val labelTextStyle = TextStyle(
            fontWeight = FontWeight.SemiBold,
            fontSize = 16.sp,
            color = StormGray40
        )

        val valueTextStyle = TextStyle(
            fontSize = 16.sp,
            color = StormGray80
        )

        Row(
            modifier = Modifier
                .fillMaxWidth()
                .height(IntrinsicSize.Min),
            verticalAlignment = Alignment.CenterVertically
        ) {
            // ÏôºÏ™Ω Ïª¨Îüº (ÏãúÍ∞Ä/Ï¢ÖÍ∞Ä)
            Column(
                modifier = Modifier.weight(1f)
            ) {
                Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
                    Text("ÏãúÍ∞Ä", style = labelTextStyle)
                    Text(formatPrice(data?.chartOpen), style = valueTextStyle)
                }
                Spacer(Modifier.height(12.dp))
                Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
                    Text("Ï¢ÖÍ∞Ä", style = labelTextStyle)
                    Text(formatPrice(data?.chartClose), style = valueTextStyle)
                }
            }

            VerticalDivider(
                color = StormGray10,
                modifier = Modifier
                    .padding(horizontal = 16.dp)
                    .fillMaxHeight()
                    .width(1.dp)
            )

            // Ïò§Î•∏Ï™Ω Ïª¨Îüº (Í±∞ÎûòÎüâ/Í±∞ÎûòÎåÄÍ∏à)
            Column(
                modifier = Modifier.weight(1f)
            ) {
                Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
                    Text("Í±∞ÎûòÎüâ", style = labelTextStyle)
                    Text(formatVolume(data?.chartVolume), style = valueTextStyle)
                }
                Spacer(Modifier.height(12.dp))
                Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
                    Text("Í±∞ÎûòÎåÄÍ∏à", style = labelTextStyle)
                    Text(formatAmountToEokWon(data?.chartTurnover), style = valueTextStyle)
                }
            }
        }
    }
}